import streamlit as st
import requests
import pandas as pd

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Sistema de Recomenda√ß√£o de Filmes", page_icon="üé¨", layout="centered"
)

# --- T√≠tulo e Descri√ß√£o ---
st.title("üé¨ Sistema de Recomenda√ß√£o de Filmes")
st.markdown("""
Bem-vindo ao nosso sistema de recomenda√ß√£o! Este projeto utiliza **filtragem colaborativa** para sugerir filmes com base nas avalia√ß√µes de usu√°rios com gostos similares.
""")

# --- URL do Backend ---
# Certifique-se de que o backend FastAPI est√° rodando.
BACKEND_URL = "http://127.0.0.1:8000/recomendar"

# --- Interface do Usu√°rio ---

st.header("‚ú® Obtenha suas Recomenda√ß√µes")

# Carregando os IDs de usu√°rio dispon√≠veis do mesmo arquivo CSV que o backend usa
try:
    # O ideal √© que o frontend seja independente, mas para este exemplo,
    # vamos ler os IDs de usu√°rio do CSV para popular o seletor.
    # Em um cen√°rio real, poderia haver um endpoint no backend para buscar usu√°rios.
    df_ratings = pd.read_csv("../backend/ratings.csv")
    available_users = sorted(df_ratings["userId"].unique())
except FileNotFoundError:
    st.error(
        "Arquivo 'ratings.csv' n√£o encontrado. Certifique-se de que a estrutura de pastas est√° correta."
    )
    available_users = [1, 2, 3, 4, 5]  # Fallback

# Entrada de dados simulados (sele√ß√£o de usu√°rio) [cite: 32]
selected_user_id = st.selectbox(
    "Selecione o seu ID de Usu√°rio:", options=available_users
)

# Entrada para o n√∫mero de recomenda√ß√µes
num_recommendations = st.slider(
    "Quantos filmes voc√™ gostaria de receber como recomenda√ß√£o?",
    min_value=3,
    max_value=10,
    value=5,
)

# Bot√£o para gerar as recomenda√ß√µes [cite: 33]
if st.button("Gerar Recomenda√ß√µes", type="primary"):
    if selected_user_id:
        with st.spinner("Buscando recomenda√ß√µes para voc√™... Por favor, aguarde."):
            try:
                # Monta o corpo da requisi√ß√£o
                payload = {
                    "user_id": int(
                        selected_user_id
                    ),  # Adicionamos a convers√£o int() aqui
                    "n_recommendations": num_recommendations,
                }

                # Faz a requisi√ß√£o POST para a API do backend
                response = requests.post(BACKEND_URL, json=payload)

                # Verifica se a requisi√ß√£o foi bem-sucedida
                if response.status_code == 200:
                    recommendations = response.json()

                    st.success(
                        f"Aqui est√£o {len(recommendations)} filmes recomendados para voc√™!"
                    )

                    # Exibi√ß√£o clara dos itens recomendados [cite: 34]
                    for movie in recommendations:
                        st.markdown(f"- **{movie['title']}** (ID: {movie['movieId']})")

                elif response.status_code == 404:
                    st.warning(
                        f"N√£o foi poss√≠vel gerar recomenda√ß√µes. O usu√°rio {selected_user_id} pode n√£o ter dados suficientes ou n√£o existe."
                    )
                else:
                    st.error(
                        f"Ocorreu um erro no servidor: {response.status_code} - {response.text}"
                    )

            except requests.exceptions.ConnectionError:
                st.error(
                    "N√£o foi poss√≠vel conectar ao backend. Verifique se o servidor FastAPI est√° em execu√ß√£o no endere√ßo correto (http://127.0.0.1:8000)."
                )
            except Exception as e:
                st.error(f"Ocorreu um erro inesperado: {e}")

# --- Rodap√© ---
st.markdown("---")
st.write("Desenvolvido como parte do projeto de Sistema de Recomenda√ß√£o.")
